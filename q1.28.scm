(use srfi-27)
(define (expmod base exp m)
	(define (mr-square x)
		(cond
			((= x 1) 1)
			((= x (- m 1)) (square x))
			((= (remainder (square base) m) 1) 0)
			(else (square x))))
	(cond
		((= exp 0) 1)
		((even? exp)
		 (remainder (mr-square (expmod base (/ exp 2) m))
		 			m))
		(else
		 (remainder (* base (expmod base (- exp 1) m))
		 			m))))
(define (miller-test n)
	(define (try-it a)
		(= (expmod a (- n 1) n) 1))
	(try-it (+ 1 (random-integer (- n 1)))))
(define (fast-prime? n times)
	(cond
		((= times 0) #t)
		((miller-test n) (fast-prime? n (- times 1)))
		(else #f)))
(define (square x) (* x x))

(display (fast-prime? 561 10))
(display (fast-prime? 563 10))
(display (fast-prime? 1009 10))
(display (fast-prime? 1013 10))
(display (fast-prime? 1105 10))
(display (fast-prime? 1729 10))
(display (fast-prime? 2465 10))
(display (fast-prime? 2821 10))
(display (fast-prime? 6601 10))
