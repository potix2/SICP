(define (last-pair x)
	(if (null? (cdr x))
		x
		(last-pair (cdr x))))
(define (make-cycle x)
	(set-cdr! (last-pair x) x)
	x)
(define (check-cycle x)
	(define tracelist '())
	(define (iter x)
		(cond ((null? x) #f)
			  ((null? (cdr x)) #f)
			  ((memq x tracelist) #t)
			  (else
			  	(set! tracelist (cons x tracelist))
				(iter (cdr x)))))
	(iter x))
(define z (make-cycle (list 'a 'b 'c)))
(define zz (list 'a 'b 'c))
(display (check-cycle z))
(newline)
(display (check-cycle zz))
