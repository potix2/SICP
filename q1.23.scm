(load "./runtime.scm")
(define (timed-prime-test n)
	(newline)
	(display n)
	(start-prime-test n (runtime))
)
(define (start-prime-test n start-time)
	(and (prime2? n)
		(report-prime (- (runtime) start-time))
	)
)
(define (report-prime elapsed-time)
	(display " *** ")
	(display elapsed-time)
	#t)
(define (search-for-primes start n)
	(define (search-inner counter rest)
		(if (= rest 0)
			#t
			(if (timed-prime-test counter)
				(search-inner (+ counter 1) (- rest 1))
				(search-inner (+ counter 1) rest))))
	(search-inner start n))
(define (fast-smallest-divisor n)
	(define (next n)
		(if (= n 2)
			3
			(+ n 2)))
	(define (divides? a b)
		(= (remainder b a) 0)
	)
	(define (find-divisor n test-divisor)
		(cond
			((> (square test-divisor) n) n)
			((divides? test-divisor n) test-divisor)
			(else (find-divisor n (next test-divisor)))
		)
	)
	(find-divisor n 2)
)
(define (prime2? n)
	(= n (fast-smallest-divisor n)))
(define (square x) (* x x))

; main
(search-for-primes 1000 3)
(search-for-primes 10000 3)
(search-for-primes 100000 3)
(search-for-primes 1000000 3)
