(use slib)
(load "/opt/local/lib/slib/random.scm")
(define (monte-carlo trials experiment)
	(define (iter trials-remaining trials-passed)
		(cond ((= trials-remaining 0)
			   (/ trials-passed trials))
			  ((experiment)
			   (iter (- trials-remaining 1) (+ trials-passed 1)))
			  (else
			   (iter (- trials-remaining 1) (+ trials-passed)))))
	(iter trials 0))

(define (random-in-range low high)
	(let ((range (- high low)))
		(+ low (random range))))
(define (estimate-integral pred x1 x2 y1 y2 trials)
	(define (integral-test)
		(pred (random-in-range x1 x2) (random-in-range y1 y2)))
	(* (monte-carlo trials integral-test) (* (- x2 x1) (- y2 y1)) 1.0))
(define (make-area-circle radius)
	(lambda (x y)
		(<= (+ (expt (- x radius) 2) (expt (- y radius) 2)) (expt radius 2))))
(define (pi-from-monte-carlo trials radius)
	(/ (estimate-integral (make-area-circle radius) 0 (* radius 2) 0 (* radius 2) trials)
	   (expt radius 2)))
(display (pi-from-monte-carlo 5000 7))
