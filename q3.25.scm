;vim: set ts=2
(define (make-table same-key?)
	(let ((local-table (list '*table*)))
		(define (assoc key records)
			(cond ((null? records) #f)
						((same-key? key (caar records)) (car records))
						(else (assoc key (cdr records)))))
		(define (lookup key-list)
			(define (lookup-iter lst table)
				(if (null? lst)
						(cdr table)
						(let ((subtable (assoc (car lst) (cdr table))))
							(if subtable
									(lookup-iter (cdr lst) subtable)
								#f))))
				(lookup-iter key-list local-table))
		(define (insert! key-list value)
			(define (insert-iter! lst table)
				(if (null? lst)
						(begin
							(set-cdr! table value)
							'ok)
						(let ((subtable (assoc (car lst) (cdr table))))
							(if subtable
									(insert-iter! (cdr lst) subtable)
									(begin
										(set-cdr! table
															(cons
																(cons (car lst) '())
																(cdr table)
															))
										(insert-iter! (cdr lst) (cadr table)))
							))))
			(insert-iter! key-list local-table))
		(define (print) (display local-table))
		(define (dispatch m)
			(cond ((eq? m 'lookup-proc) lookup)
						((eq? m 'insert-proc!) insert!)
						((eq? m 'print) print)
						(else (error "Unknown operation -- TABLE" m))))
		dispatch))
(define t (make-table equal?))
(define put (t 'insert-proc!))
(define get (t 'lookup-proc))
(define print (t 'print))
(put (list 'math '+) 43)
(put (list 'math '-) 22)
(put (list 'letters 'a) 11)
(put (list 'letters 'b) 12)
(print)
(newline)
(display (get (list 'letters 'a))) (newline)
(display (get (list 'math '+))) (newline)
