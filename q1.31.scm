(define (product term a next b)
	(if (> a b)
		1
		(* (term a)
			(product term (next a) next b))
	)
)
(define (product-iter term a next b)
	(define (iter a result)
		(if (> a b)
			result
			(iter (next a) (* result (term a)))
		)
	)
	(iter a 1)
)
(define (fact n)
	(define (inc x) (+ x 1))
	(define (ident x) x)
	(product ident 1 inc n)
)
;(define (pi n)
;	(* (product (lambda (x) (if (even? x) (/ x (+ 1.0 x)) (/ (+ 1.0 x) x)))
;		2
;		(lambda (x) (+ x 1))
;		(+ 1 n))
;		4))
(define (pi n)
	(* (product
		(lambda (x) (if (= (remainder x 2) 0) (/ x (+ 1.0 x)) (/ (+ 1.0 x) x)))
			2
			(lambda (x) (+ 1 x))
			(+ 1 n))
		4))
(display (pi 100))
