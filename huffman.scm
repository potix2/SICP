(define debug 1)
(define (make-leaf symbol weight)
	(list 'leaf symbol weight))
(define (leaf? object)
	(eq? (car object) 'leaf))
(define (symbol-leaf x) (cadr x))
(define (weight-leaf x) (caddr x))
(define (make-code-tree left right)
	(list left
		  right
		  (append (symbols left) (symbols right))
		  (+ (weight left) (weight right))))
(define (left-branch tree) (car tree))
(define (right-branch tree) (cadr tree))
(define (symbols tree)
	(if (leaf? tree)
		(list (symbol-leaf tree))
		(caddr tree)))
(define (weight tree)
	(if (leaf? tree)
		(weight-leaf tree)
		(cadddr tree)))
(define (decode bits tree)
	(define (decode-1 bits current-branch)
		(if (null? bits)
			'()
			(let ((next-branch
				  (choose-branch (car bits) current-branch)))
				(if (leaf? next-branch)
					(cons (symbol-leaf next-branch)
						  (decode-1 (cdr bits) tree))
					(decode-1 (cdr bits) next-branch)))))
	(decode-1 bits tree))
(define (choose-branch bit branch)
	(cond ((= bit 0) (left-branch branch))
		  ((= bit 1) (right-branch branch))
		  (else (error "bad bit -- CHOOSE-BRANCH" bit))))
(define (adjoin-set x set)
	(cond ((null? set) (list x))
		  ((< (weight x) (weight (car set))) (cons x set))
		  (else (cons (car set)
		  			  (adjoin-set x (cdr set))))))
(define (make-leaf-set pairs)
	(if (null? pairs)
		'()
		(let ((pair (car pairs)))
			(adjoin-set (make-leaf (car pair)
								   (cadr pair))
						(make-leaf-set (cdr pairs))))))

; unit test
(define (assert predicate msg)
	(if predicate
		#t
		(error "failed to assertion: " msg)))
(define (assert-eq exp expect msg)
	(assert (equal? exp expect) msg))
(if (= debug 1)
	(and
		(assert-eq (make-leaf 'A 2) '(leaf A 2) "make-leaf")
		(assert (leaf? (make-leaf 'A 2)) "leaf?")
		(assert-eq (symbol-leaf (make-leaf 'A 2)) 'A "symbol-leaf")
		(assert-eq (symbols (make-leaf 'A 2)) '(A) "symbols passed leaf")
		(assert-eq (symbols (make-code-tree (make-leaf 'A 2) (make-leaf 'B 3))) '(A B) "symbols passed tree")
		(assert-eq (weight (make-leaf 'A 2)) 2 "weight passed leaf")
		(assert-eq (weight (make-code-tree (make-leaf 'A 2) (make-leaf 'B 3))) 5 "weight passed tree")
	)
#t)
