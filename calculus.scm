(load "./data-driven.scm")
; helper
(define (square x) (* x x))
	
; top level
(define (add x y) (apply-generic 'add x y))
(define (sub x y) (apply-generic 'sub x y))
(define (mul x y) (apply-generic 'mul x y))
(define (div x y) (apply-generic 'div x y))

; 2.79
(define (equ? x y) (apply-generic 'equ? x y))
; 2.80
(define (=zero? x) (apply-generic '=zero? x))

; scheme-number
(define (install-scheme-number-package)
	(define (tag x)
		(attach-tag 'scheme-number x))
	(put 'add '(scheme-number scheme-number)
		 (lambda (x y) (tag (+ x y))))
	(put 'sub '(scheme-number scheme-number)
		 (lambda (x y) (tag (- x y))))
	(put 'mul '(scheme-number scheme-number)
		 (lambda (x y) (tag (* x y))))
	(put 'div '(scheme-number scheme-number)
		 (lambda (x y) (tag (/ x y))))
	(put 'make 'scheme-number
		 (lambda (x) (tag x)))
	(put 'equ? '(scheme-number scheme-number)
		 (lambda (x y) (= x y)))
	(put '=zero? '(scheme-number)
		 (lambda (x) (= x 0)))
	'done)
(define (make-scheme-number n)
	((get 'make 'scheme-number) n))

; rational
(load "./gcd.scm")
(define (install-rational-package)
	(define (numer x) (car x))
	(define (denom x) (cdr x))
	(define (make-rat n d)
		(let ((g (gcd n d)))
			(cons (/ n g) (/ d g))))
	(define (add-rat x y)
		(make-rat (+ (* (numer x) (denom y))
					 (* (numer y) (denom x)))
				  (* (denom x) (denom y))))
	(define (sub-rat x y)
		(make-rat (- (* (numer x) (denom y))
					 (* (numer y) (denom x)))
				  (* (denom x) (denom y))))
	(define (mul-rat x y)
		(make-rat (* (numer x) (numer y))
				  (* (denom x) (denom y))))
	(define (div-rat x y)
		(make-rat (* (numer x) (denom y))
				  (* (denom x) (numer y))))

	(define (tag x) (attach-tag 'rational x))
	(put 'add '(rational rational)
		(lambda (x y) (tag (add-rat x y))))
	(put 'sub '(rational rational)
		(lambda (x y) (tag (sub-rat x y))))
	(put 'mul '(rational rational)
		(lambda (x y) (tag (mul-rat x y))))
	(put 'div '(rational rational)
		(lambda (x y) (tag (div-rat x y))))
	
	(put 'make 'rational
		(lambda (n d) (tag (make-rat n d))))
	(put 'equ? '(rational rational)
		(lambda (x y) (and (= (numer x) (numer y))
						   (= (denom x) (denom y)))))
	(put '=zero? '(rational)
		(lambda (x) (= (numer x) 0)))
	'done)
(define (make-rational n d)
	((get 'make 'rational) n d))
(define (numer x) (car x))
(define (denom x) (cdr x))

(define (install-complex-package)
	(define (make-from-real-imag x y)
		((get 'make-from-real-imag 'rectangular) x y))
	(define (make-from-mag-ang r a)
		((get 'make-from-mag-ang 'polar) r a))
	
	(define (add-complex z1 z2)
		(make-from-real-imag (+ (real-part z1) (real-part z2))
							 (+ (imag-part z1) (imag-part z2))))
	(define (sub-complex z1 z2)
		(make-from-real-imag (- (real-part z1) (real-part z2))
							 (- (imag-part z1) (imag-part z2))))
	(define (mul-complex z1 z2)
		(make-from-mag-ang (* (magnitude z1) (magnitude z2))
						   (+ (angle z1) (angle z2))))
	(define (div-complex z1 z2)
		(make-from-mag-ang (/ (magnitude z1) (magnitude z2))
						   (- (angle z1) (angle z2))))

	(define (tag z) (attach-tag 'complex z))
	(put 'add '(complex complex)
		(lambda (z1 z2) (tag (add-complex z1 z2))))
	(put 'sub '(complex complex)
		(lambda (z1 z2) (tag (sub-complex z1 z2))))
	(put 'mul '(complex complex)
		(lambda (z1 z2) (tag (mul-complex z1 z2))))
	(put 'div '(complex complex)
		(lambda (z1 z2) (tag (div-complex z1 z2))))
	(put 'make-from-real-imag 'complex
		(lambda (x y) (tag (make-from-real-imag x y))))
	(put 'make-from-mag-ang 'complex
		(lambda (r a) (tag (make-from-mag-ang r a))))
	;2.77
	(put 'real-part '(complex) real-part)
	(put 'imag-part '(complex) imag-part)
	(put 'magnitude '(complex) magnitude)
	(put 'angle '(complex) angle)
	'done)
	;2.79
	(put 'equ? '(complex complex) equ?)
	(put '=zero? '(complex) =zero?)
(define (make-complex-from-real-imag x y)
	((get 'make-from-real-imag 'complex) x y))
(define (make-complex-from-mag-ang r a)
	((get 'make-from-mag-ang 'complex) r a))

; rectangular
(define (install-rectangular-package)
	(define (real-part z) (car z))
	(define (imag-part z) (cdr z))
	(define (make-from-real-imag x y) (cons x y))
	(define (magnitude z)
		(sqrt (+ (square (real-part z))
			     (square (imag-part z)))))
	(define (angle z)
		(atan (imag-part z) (real-part z)))
	(define (make-from-mag-ang r a)
		(cons (* r (cos a)) (* r (sin a))))
	
	(define (tag x) (attach-tag 'rectangular x))
	(put 'real-part '(rectangular) real-part)
	(put 'imag-part '(rectangular) imag-part)
	(put 'magnitude '(rectangular) magnitude)
	(put 'angle '(rectangular) angle)
	(put 'make-from-real-imag 'rectangular
		(lambda (x y) (tag (make-from-real-imag x y))))
	(put 'make-from-mag-ang 'rectangular
		(lambda (r a) (tag (make-from-mag-ang r a))))
	;2.79
	(put 'equ? '(rectangular rectangular)
		(lambda (x y) (and (= (real-part x) (real-part y))
						   (= (imag-part x) (imag-part y)))))
	(put '=zero? '(rectangular)
		(lambda (x) (and (= (real-part x) 0)
						 (= (imag-part x) 0))))
	'done)

;polar
(define (install-polar-package)
	(define (magnitude z) (car z))
	(define (angle z) (cdr z))
	(define (make-from-mag-ang r a) (cons r a))
	(define (real-part z)
		(* (magnitude z) (cos (angle z))))
	(define (imag-part z)
		(* (magnitude z) (sin (angle z))))
	(define (make-from-real-imag x y)
		(cons (sqrt (+ (square x) (square y)))
			(atan y x)))
	
	(define (tag x) (attach-tag 'polar x))
	(put 'real-part '(polar) real-part)
	(put 'imag-part '(polar) imag-part)
	(put 'magnitude '(polar) magnitude)
	(put 'angle '(polar) angle)
	(put 'make-from-real-imag 'polar
		(lambda (x y) (tag (make-from-real-imag x y))))
	(put 'make-from-mag-ang 'polar
		(lambda (r a) (tag (make-from-mag-ang r a))))
	(put 'equ? '(polar polar)
		(lambda (x y) (and (= (magnitude x) (magnitude y))
						   (= (angle x) (angle y)))))
	(put '=zero? '(polar)
		(lambda (x) (= 0 (magnitude x))))
	'done)
(define (make-from-real-imag x y)
	((get 'make-from-real-imag 'rectangular) x y))
(define (make-from-mag-ang r a)
	((get 'make-from-mag-ang 'polar) r a))
(define (real-part z) (apply-generic 'real-part z))
(define (imag-part z) (apply-generic 'imag-part z))
(define (magnitude z) (apply-generic 'magnitude z))
(define (angle z) (apply-generic 'angle z))

;coercion
(define (scheme-number->complex n)
	(make-complex-from-real-imag (contents n) 0))
(put-coercion 'scheme-number 'complex scheme-number->complex)
