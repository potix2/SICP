(load "./q2.63.scm")
(load "./q2.64.scm")
(define (intersection-set set1 set2)
	(if (or (null? set1) (null? set2))
		'()
		(let ((x1 (car set1)) (x2 (car set2)))
			(cond ((= x1 x2)
				   (cons x1
				   		 (intersection-set (cdr set1)
						 				   (cdr set2))))
				  ((< x1 x2)
				   (intersection-set (cdr set1) set2))
				  ((< x2 x1)
				   (intersection-set set1 (cdr set2)))))))
(define (union-set set1 set2)
	(if (or (null? set1) (null? set2))
		(append set1 set2)
		(let ((x1 (car set1)) (x2 (car set2)))
			(cond ((= x1 x2) (cons x1 (union-set (cdr set1) (cdr set2))))
				  ((< x1 x2) (cons x1 (union-set (cdr set1) set2)))
				  ((< x2 x1) (cons x2 (union-set set1 (cdr set2))))))))
(define (union-set-1 set1 set2)
	(list->tree (union-set (tree->list-2 set1)
						   (tree->list-2 set2))))
(define (intersection-set-1 set1 set2)
	(list->tree (intersection-set (tree->list-2 set1)
								  (tree->list-2 set2))))

;test
;(display (union-set-1 (list->tree '(1 2 3)) (list->tree '(2 3 4))))
;(display (intersection-set-1 (list->tree '(1 2 3)) (list->tree '(2 3 4))))
