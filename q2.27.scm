(define (deep-reverse x)
	(if (null? x)
		'()
		(if (pair? (car x))
			(append (deep-reverse (cdr x)) (list (deep-reverse (car x))))
			(append (deep-reverse (cdr x)) (list (car x))))))
(define (deep-reverse-test)
	(let ((x (list (list 1 2) (list 3 4))))
		(and
			(equal? (deep-reverse x) (list (list 4 3) (list 2 1)))
			(equal? (deep-reverse '()) '())
			(equal? (deep-reverse (list 1 2 3 4)) (list 4 3 2 1))
			(equal? (deep-reverse (list (list (list 1)))) (list (list (list 1)))))))
(display (deep-reverse-test))
