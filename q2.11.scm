(load "./interval.scm")
(define (equal-interval x y)
	(let ((lx (lower-bound x))
		  (ux (upper-bound x))
		  (ly (lower-bound y))
		  (uy (upper-bound y)))
		(and (= lx ly) (= ux uy))))

(define (mul-interval-test)
	(and (equal-interval (mul-interval (make-interval  0  0) (make-interval  1  1)) (make-interval  0  0))
		 (equal-interval (mul-interval (make-interval  1  1) (make-interval  1  1)) (make-interval  1  1))
		 (equal-interval (mul-interval (make-interval  1  2) (make-interval  2  3)) (make-interval  2  6))
		 (equal-interval (mul-interval (make-interval  1  2) (make-interval -2  3)) (make-interval -4  6))
		 (equal-interval (mul-interval (make-interval  1  2) (make-interval -4 -2)) (make-interval -8 -2))
		 (equal-interval (mul-interval (make-interval -1  2) (make-interval  2  3)) (make-interval -3  6))
		 (equal-interval (mul-interval (make-interval -1  2) (make-interval -2  3)) (make-interval -4  6))
		 (equal-interval (mul-interval (make-interval -2  3) (make-interval -1  2)) (make-interval -4  6))
		 (equal-interval (mul-interval (make-interval -1  2) (make-interval -3 -2)) (make-interval -6  3))
		 (equal-interval (mul-interval (make-interval -2 -1) (make-interval  2  3)) (make-interval -6 -2))
		 (equal-interval (mul-interval (make-interval -2 -1) (make-interval -3  2)) (make-interval -4  6))
		 (equal-interval (mul-interval (make-interval -2 -1) (make-interval -3 -2)) (make-interval  2  6))
	))
(display (mul-interval-test))
(newline)
